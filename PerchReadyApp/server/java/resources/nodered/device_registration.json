[
  {
    "id": "bd3e9569.42c168",
    "type": "subflow",
    "name": "(cloudant) deleteByPin",
    "in": [
      {
        "x": 44,
        "y": 236,
        "wires": [
          {
            "id": "e0001a9a.1fffe8"
          }
        ]
      }
    ],
    "out": []
  },
  {
    "id": "a259c34a.5da64",
    "type": "function",
    "name": "DocToDelete",
    "func": "//\tThis method is executed for every returned array from getAllForPin().\n//\tIt then generates the url to delete each document from the cloudant database.\n\nvar newmsg = {};\n\nif (msg.docId == null || msg.docRev == null)\n\treturn null;\nelse {\n\n\tnewmsg.url = context.global.cloudantDBURL + msg.docId + \"?rev=\" + msg.docRev; \n\tnewmsg.method = \"DELETE\";\n\tnewmsg.headers = { 'IBM-Application-Secret' : context.global.appSecret};\n\tnewmsg.payload = {};\n\t\n\treturn newmsg;\n}\n",
    "outputs": 1,
    "x": 816.1428833007812,
    "y": 236.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": [
      [
        "ee5ba3da.11a46",
        "31eee94e.ce1116"
      ]
    ]
  },
  {
    "id": "31eee94e.ce1116",
    "type": "http request",
    "name": "sendDeleteDoc",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1054.1428833007812,
    "y": 235.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": [
      [
        "b4eeff27.4b11"
      ]
    ]
  },
  {
    "id": "b4eeff27.4b11",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 1214.1428833007812,
    "y": 165.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": []
  },
  {
    "id": "e0001a9a.1fffe8",
    "type": "function",
    "name": "searchForPin",
    "func": "//\tThis method takes in a device pin as an input (msg.device_pin)\n//\tand prepares the url for the GET request. It gets all the device\n//\tinstance and sensor data documents associated with that device pin. \n\nvar newmsg = {};\nnewmsg.device_pin = msg.device_pin;\nnewmsg.url = context.global.cloudantDBURL + \"/\" + context.global.cloudantDBName\n            + \"/_design/library/_view/delete_view_by_pin?key=\\\"\" \n\t\t\t+ newmsg.device_pin  +\"\\\"&limit=\" + context.global.queryLimit; \nnewmsg.method = \"GET\";\n//clearing the payload from unnecessary data\nnewmsg.payload = {} ; \n\n\nreturn  newmsg;\n",
    "outputs": 1,
    "noerr": 0,
    "x": 192.14288330078125,
    "y": 235.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": [
      [
        "ffcc39cc.0033c8",
        "71c61919.8e39e8"
      ]
    ]
  },
  {
    "id": "71c61919.8e39e8",
    "type": "http request",
    "name": "sendGetViewByPin",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 415.14288330078125,
    "y": 236.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": [
      [
        "9379f504.6c8608",
        "44b46a43.bb4b94"
      ]
    ]
  },
  {
    "id": "44b46a43.bb4b94",
    "type": "function",
    "name": "getAllForPin",
    "func": "//\tThis method parses results from the GET request.\n\nvar result = JSON.parse(msg.payload); \nvar retData = []; \n//\tFor all the rows in the results, extract the document id and rev\nfor (i = 0; i < result.rows.length; i++){\n\tvar jsonIdRev = {};\n\tjsonIdRev.docId = result.rows[i].value._id;\t\t\n\tjsonIdRev.docRev = result.rows[i].value._rev;\n\t//add each pair to the return array\n\tretData.push(jsonIdRev);\t\n}\n\n//\treturning an array of arrays since each returned array \n//\tis considered as a separate message going into the rest of the flow\nreturn [retData]; \n\n",
    "outputs": "1",
    "x": 629.1428833007812,
    "y": 236.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": [
      [
        "a259c34a.5da64",
        "dca553a3.235ab"
      ]
    ]
  },
  {
    "id": "dca553a3.235ab",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 778.1428833007812,
    "y": 169.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": []
  },
  {
    "id": "ffcc39cc.0033c8",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 377.14288330078125,
    "y": 168.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": []
  },
  {
    "id": "ee5ba3da.11a46",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 978.1428833007812,
    "y": 170.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": []
  },
  {
    "id": "9379f504.6c8608",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 578.1428833007812,
    "y": 169.14285278320312,
    "z": "bd3e9569.42c168",
    "wires": []
  },
  {
    "id": "a25c0019.5da4",
    "type": "websocket-listener",
    "path": "/ws/deviceregistration",
    "wholemsg": "false"
  },
  {
    "id": "7ad7e9fe.852818",
    "type": "websocket in",
    "name": "deviceRegistrationEvents",
    "server": "a25c0019.5da4",
    "client": "",
    "x": 196.25,
    "y": 285,
    "z": "e063b00.f1f9c5",
    "wires": [
      [
        "a189b377.5e765",
        "5c71ade7.a38e54"
      ]
    ]
  },
  {
    "id": "c7a6613a.3859a",
    "type": "function",
    "name": "(IBMPush) createTag",
    "func": "//\tThis method prepares the body for the POST request\n//\tthat will create the appropriate tag for IBM Push\n//\tNote: needs the app secret for authentication\n\n\nvar newmsg = {};\n\n\nnewmsg.headers = { 'IBM-Application-Secret' : context.global.appSecret };\n\nnewmsg.url = context.global.pushURL + \"/tags\"; \nnewmsg.payload = {\n\t\t\t\t  \"name\": msg.device_pin,\n\t\t\t\t  \"description\" : \"IBM Push tag for IoT deviceId : \" + msg.device_pin\n\t\t\t     };\n\nreturn newmsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 829.5000114440918,
    "y": 184.25000286102295,
    "z": "e063b00.f1f9c5",
    "wires": [
      [
        "ad6c60d.f5293a",
        "b03f3d4a.4fc0c"
      ]
    ]
  },
  {
    "id": "4f1f04c9.b0e0fc",
    "type": "debug",
    "name": "DEBUG",
    "active": true,
    "console": "true",
    "complete": "true",
    "x": 1335.25,
    "y": 184,
    "z": "e063b00.f1f9c5",
    "wires": []
  },
  {
    "id": "b03f3d4a.4fc0c",
    "type": "http request",
    "name": "(IBMPush) sendCreateTag",
    "method": "POST",
    "ret": "txt",
    "url": "",
    "x": 1093.25,
    "y": 184,
    "z": "e063b00.f1f9c5",
    "wires": [
      [
        "4f1f04c9.b0e0fc"
      ]
    ]
  },
  {
    "id": "ad6c60d.f5293a",
    "type": "debug",
    "name": "DEBUG",
    "active": true,
    "console": "true",
    "complete": "true",
    "x": 1032.3928489685059,
    "y": 127.5714340209961,
    "z": "e063b00.f1f9c5",
    "wires": []
  },
  {
    "id": "5c71ade7.a38e54",
    "type": "function",
    "name": "deviceRegister?",
    "func": "//\tThis method parses the data recived from the simulator app.\n//\tIt determines whether to register or unregister a specific tag.\n\n\nmsg.payload = JSON.parse(msg.payload);\n\n\n//  The [msg.payload, null] returned array format\n//  is to choose the appropriate output port. \nif (msg.payload.register === 1)\n\treturn [msg.payload, null]; \nelse if(msg.payload.register === 0)\n\treturn [null, msg.payload];\n\n",
    "outputs": "2",
    "noerr": 0,
    "x": 484.25,
    "y": 286,
    "z": "e063b00.f1f9c5",
    "wires": [
      [
        "c7a6613a.3859a"
      ],
      [
        "23bdeb72.dc4214",
        "f84cede8.07b31",
        "2f6018ec.d09fe8"
      ]
    ]
  },
  {
    "id": "a189b377.5e765",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 390.25,
    "y": 162,
    "z": "e063b00.f1f9c5",
    "wires": []
  },
  {
    "id": "f84cede8.07b31",
    "type": "function",
    "name": "(IBMPush) deleteTag",
    "func": "//\tThis method prepares the body for the DELETE request\n//\tthat will delete the appropriate tag for IBM Push\n//\tNote: needs the app secret for authentication\n\n\nvar newmsg = {};\n\nnewmsg.url = context.global.pushURL + \"/tags/\" + msg.device_pin; \n//newmsg.url = context.global.tagURL + msg.device_pin; \nnewmsg.method = \"DELETE\";\nnewmsg.headers = { 'IBM-Application-Secret' : context.global.appSecret  };\nnewmsg.payload = {};\n  \nreturn newmsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 831.6363639831543,
    "y": 346.61365509033203,
    "z": "e063b00.f1f9c5",
    "wires": [
      [
        "a5187964.5ae788"
      ]
    ]
  },
  {
    "id": "a5187964.5ae788",
    "type": "http request",
    "name": "(IBMPush) sendDeleteTag",
    "method": "use",
    "ret": "txt",
    "url": "",
    "x": 1133.25,
    "y": 346,
    "z": "e063b00.f1f9c5",
    "wires": [
      [
        "c49f9038.3b607"
      ]
    ]
  },
  {
    "id": "c49f9038.3b607",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 1352.25,
    "y": 346,
    "z": "e063b00.f1f9c5",
    "wires": []
  },
  {
    "id": "23bdeb72.dc4214",
    "type": "debug",
    "name": "DEBUG",
    "active": false,
    "console": "true",
    "complete": "true",
    "x": 792.2142944335938,
    "y": 241.03573608398438,
    "z": "e063b00.f1f9c5",
    "wires": []
  },
  {
    "id": "91598b4d.6ea678",
    "type": "comment",
    "name": "Device Registration Flow Description",
    "info": "The device registration flow receives register/unregister packets from the IOT Simulator via the MQTT web socket. Below is the description for all of the nodes in this flow.\n\n* **deviceRegistrationEvents**:\nThis is an input type websocket node that listens for when an instance of the simulator opens or closes. The received packets contain information such as the pin of the simulator and all the sensor device class ids associated with this simulator.\n\n* **deviceRegister?**:\nThis node parses the IOT payload received from the websocket and reroutes the flow of the instance based on which request was received. Note: This node has two different outputs. In case of a register request, only the route flowing off of the top output will continue executing. This is accomplished by the following code:\n```\nif (msg.payload.register === 1)\n\treturn [msg.payload, null];\nelse if(msg.payload.register === 0)\n\treturn [null, msg.payload];\n```\nThe reason we pass in null for first or second output is that if we choose the top flow we don't want the bottom flow to execute anything.\n\n* **(IBMPush)createTag**:\tThis node uses the simulator instance pin received from the websocket to prepare the HTTP POST request to the [IBM Push REST API](https://mobile.ng.bluemix.net/mbaas-api/#!/push). This request needs to be authenticated using the IBM Bluemix Application Secret. This can we found in the dashboard of the bluemix application by clicking **Overview->Mobile Options**. The URL for this request is saved in the settings file and is available as a global variable though the nodered flows. To register the tag inside the IBM Push service, we also need to provide a tag name and a description in the body of the POST request. The IOT simulator pin is used as the tag name in Perch.\n\n* **(IBMPush)sendCreateTag**:\nThis node sends the HTTP POST request from the *createTag* node to the IBM Push service associated with the Perch Bluemix application. When the POST request is successfully sent, the new tag will be registered in the Push service and the iOS device using the simulator will be able to subscribe to it to receive push notifications.\n\n* **(IBMPush)deleteTag**: This node uses the simulator instance pin received from the websocket to prepare the HTTP DELETE request to the [IBM Push REST API](https://mobile.ng.bluemix.net/mbaas-api/#!/push). This request needs to be authenticated using the IBM Bluemix Application Secret. This can we found in the dashboard of the bluemix application by clicking **Overview->Mobile Options**. The URL for this request is saved in the settings file and is available as a global variable though the nodered flows. To delete the tag from the IBM Push service, we also need to add IOT simulator pin to the URL.\n\n* **(IBMPush)sendDeletteTag**:\nThis node sends the HTTP DELETE request from the *deleteTag* node to the IBM Push service associated with the Perch Bluemix application. When the DELETE request is successfully sent, the new tag will be deleted in the Push service.\n\n* **(cloudant)deleteByPin (Subflow)**:\nGiven a device pin, this subflow will delete all the *sensor_data* and *notification* documents associated with the unregistered pin.\n",
    "x": 242.80555725097656,
    "y": 83.42856788635254,
    "z": "e063b00.f1f9c5",
    "wires": []
  },
  {
    "id": "2f6018ec.d09fe8",
    "type": "subflow:bd3e9569.42c168",
    "name": "",
    "x": 840,
    "y": 290,
    "z": "e063b00.f1f9c5",
    "wires": []
  }
]